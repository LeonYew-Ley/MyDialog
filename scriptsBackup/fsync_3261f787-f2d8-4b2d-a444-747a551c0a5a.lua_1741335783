---
---  Author: 【艾延波】
---  AuthorID: 【273354】
---  CreateTime: 【2022-10-17 17:06:34】
--- 【FSync】
--- 【对话卡】
---

local class = require("middleclass")
local WBElement = require("mworld/worldBaseElement")
local DOTween = CS.DG.Tweening.DOTween

---@class fsync_bf420262_a95a_47eb_a363_a1ca3fe0e8f4 : WorldBaseElement
---@field state DialogState 状态
---@field flag number 标志数字
---@field uniId string 数字
---
---@field maxNameLen number 名字数量
---@field maxGoonTextLen number 继续按钮文字数量
---
---@field isHiddenOperation number 是否隐藏操作面板
---@field name string 名字
---@field text string 文本
---@field goonType number 下一步类型。
---@field sortingOrder number layer的层级
---@field audio table 音频信息
---@field icon table 图片信息
---@field countDownTimer number 倒计时时长
---@field goonButtonText string 倒计时时长
---@field hasTriggerAudioFinlish  boolean 已经触发过音频播放完
local FsyncElement = class("fsync_bf420262-a95a-47eb-a363-a1ca3fe0e8f4", WBElement)

---@class DialogState
local DialogState = {
    Init = 0,
    Speaking = 1,
}

---@type CS.UnityEngine.PlayerPrefs
local PlayerPrefs = CS.UnityEngine.PlayerPrefs

-- 对话卡开始
local DIALOGUE_CARD_START = "Dialogue.Card.Start"

-- 对话卡结束
local DIALOGUE_CARD_FINISH = "Dialogue.Card.Finish"

-- 音频速度
local DIALOGUE_AI_PITCH = "DialogueAndAIAudioPitch"


--- 0 不翻译 1 翻译
---@param worldElement CS.Tal.framesync.WorldElement
function FsyncElement:initialize(worldElement)
    FsyncElement.super.initialize(self, worldElement)
    ---@type CommonService
    self.commonService = App:GetService("CommonService")
    --订阅KEY消息
    self.hasTriggerAudioFinlish = false
    self.state = DialogState.Init

    self.uniId = tostring(self.VisElement.gameObject:GetInstanceID())

    self.uniIdParent = tostring(self.VisElement.gameObject.transform.parent.gameObject:GetInstanceID())
     -- 注册事件
    self:RegisterHanlder()
end

function FsyncElement:Exit()
    self:StopAudio(false)
    FsyncElement.super.Exit(self)
end

function FsyncElement:SetUpData()
    local configService = CourseEnv.ServicesManager:GetConfigService()
    local jsonService = CourseEnv.ServicesManager.GetJsonService()

    self.maxNameLen = 10
    self.maxGoonTextLen = 8

    self.name = self:SubStrForMaxNum(self.data.name, self.maxNameLen)
    self.text = self:getNewSentence(self.data.showText)

    self.goonType = tonumber(configService:GetConfigValueByConfigKey(self.VisElement, "goonType")) or 0
    self.countDownTimer = configService:GetConfigValueByConfigKey(self.VisElement, "countDownTimer")
    self.goonButtonText = configService:GetConfigValueByConfigKey(self.VisElement, "goonButtonText")

    local audioStr = self.data.standardAudio
    local iconStr = self.data.icon
    local imageContentStr = configService:GetConfigValueByConfigKey(self.VisElement, "imageContent")

    local isHiddenOperationStr = configService:GetConfigValueByConfigKey(self.VisElement, "isHiddenOperation")
    if isHiddenOperationStr == "True" then
        self.isHiddenOperation = true
    else
        self.isHiddenOperation = false
    end
 
    self.audio = {}
    if audioStr and audioStr ~= "" then
        self.audio = jsonService:decode(audioStr)
    end
    self.imageContent = {}
    if imageContentStr and imageContentStr ~= "" then
        self.imageContent = jsonService:decode(imageContentStr)
    end

    self.icon = {}
    if iconStr then
        self.icon = jsonService:decode(iconStr)
    end
    self.sortingOrder = 499

    -- 翻译
    self.fanyiText = self.data.tipsText
    if self.fanyiText and self.fanyiText ~= "" then
        self.hasFanyi = true
    else
        self.hasFanyi = false
    end
    -- 重听
    if self.audio then
        self.showReplay = true
    else
        self.showReplay = false
    end
end

function FsyncElement:RegisterHanlder()
    local observerService = CourseEnv.ServicesManager:GetObserverService()

    observerService:Watch(
        DIALOGUE_CARD_START .. self.uniIdParent,
        function(key, args)
            self.data = args[0].data
            -- 默认 没有播放过音频
            self.hasTriggerAudioFinlish = false
            self:StartDialog()
        end
    )

    observerService:Watch("Dialog.Panel.ClickGoOnButton" .. self.uniId, function()
        g_Log("forping:Dialog:点击了继续按钮")
        self:StopDialog()
    end)

    observerService:Watch("Dialog.Panel.ClickReplayButton" .. self.uniId, function(key, args)
        local type = tonumber(args[0]) or 0
        g_Log("forping:Dialog:点击了重播按钮 ", tostring(type))
        self:DealClickReplayButtonEvent(type)
    end)

    observerService:Watch("Dialog.Panel.ReplayGuidePlayFinlish" .. self.uniId, function(key, args)
        self:StopReplayGuide()
    end)
end

function FsyncElement:StartDialog()
    if self.state == DialogState.Speaking then
        return
    end

    self.state = DialogState.Speaking
    self:StartCurrentDiologSpeek()

    if self.isHiddenOperation then
        self:ChangeOperationState(false)
    end
end

function FsyncElement:StopDialog()
    if self.isHiddenOperation then
        self:ChangeOperationState(true)
    end

    if self.state ~= DialogState.Speaking then
        return
    end
    self:StopAudio(true) -- 播放完音频

    self.state = DialogState.Init

    local observerService = CourseEnv.ServicesManager:GetObserverService()

    observerService:Fire("Dialog.Panel.HiddenSpeek" .. self.uniId)

    observerService:Fire(DIALOGUE_CARD_FINISH .. self.uniIdParent, { isFinish = true })
end

function FsyncElement:StartCurrentDiologSpeek()
    g_Log("forping:Dialog:开始展示对话")
    self:SetUpData()
    local observerService = CourseEnv.ServicesManager:GetObserverService()

    local param = {}
    -- 直接有对应关系的。赋值
    param.name = self.name
    param.icon = self.icon.uAddress
    param.text = self.text
    param.imageContent = self.imageContent.uAddress

    param.goonType = tonumber(self.goonType)
    param.countDownTimer = tonumber(self.countDownTimer) or 5
    param.goonTitle = self.goonButtonText
    param.goonTitle = self:SubStrForMaxNum(param.goonTitle, self.maxGoonTextLen)
    if not param.goonTitle or param.goonTitle == "" then
        param.goonTitle = "点击继续"
    end

    --翻译
    param.fanyiText = self.fanyiText
    param.hasFanyi = self.hasFanyi

    param.sortingOrder = 499
    param.Script = self.VisElement.gameObject.transform.parent

    -- 处理语音播放和倒计时
    local audioName = self.audio.uAddress
    param.audioName = audioName

    local hasAudio = self:StartAudioWithName(param.audioName, true, param)

    param.showReplay = self.showReplay
    if not hasAudio then
        param.showReplay = false
    end

    observerService:Fire("FirstDialogSpeek.Panel.ShowSpeek" .. self.uniId, { data = param })

    if not hasAudio then
        self:DealNotHaveAuido(param)
    end
end

local DialogGuidePlayerPrefsKey = "DialogGuidePlayerPrefsKey"
---@public 处理音频播放完成
function FsyncElement:DealGoonButtonAndReplsyGuideStateWhenAuidoPlayFinlish(param)
    g_Log("forping:Dialog.DealGoonButtonAndReplsyGuideStateWhenAuidoPlayFinlish")

    local observerService = CourseEnv.ServicesManager:GetObserverService()

    if param.showReplay then
        local userDialogGuidePlayerPrefsKey = tostring(App.Info.userId) .. DialogGuidePlayerPrefsKey
        local savedValue = PlayerPrefs.GetInt(userDialogGuidePlayerPrefsKey, 0)
        if savedValue == 0 then
            -- if savedValue == 0 or savedValue == 1 then
            PlayerPrefs.SetInt(userDialogGuidePlayerPrefsKey, 1)
            PlayerPrefs.Save()
            g_Log("forping:Dialog:播放重听引导")
            observerService:Fire("Dialog.Panel.ShowReplayGuide" .. self.uniId)
            return
        end
    end

    g_Log("forping..2")
    local goonButtonInfo = {}

    goonButtonInfo.goonTitle = param.goonTitle;
    goonButtonInfo.countDownTimer = param.countDownTimer;

    if param.goonType == 0 then
        goonButtonInfo.hasCountDown = false
        observerService:Fire("Dialog.Panel.ShowGoonButton" .. self.uniId, goonButtonInfo)
    elseif param.goonType == 1 then
        self:StopDialog()
    elseif param.goonType == 2 then
        goonButtonInfo.hasCountDown = true
        observerService:Fire("Dialog.Panel.ShowGoonButton" .. self.uniId, goonButtonInfo)
    end
end

---@public 处理没有音频
function FsyncElement:DealNotHaveAuido(param)
    g_Log("forping:Dialog:DealNotHaveAuido")
    local observerService = CourseEnv.ServicesManager:GetObserverService()

    local goonButtonInfo = {}
    goonButtonInfo.goonTitle = param.goonTitle;
    goonButtonInfo.countDownTimer = param.countDownTimer;
    if param.goonType == 2 then
        goonButtonInfo.hasCountDown = true
    else
        goonButtonInfo.hasCountDown = false
    end
    observerService:Fire("Dialog.Panel.ShowGoonButton" .. self.uniId, goonButtonInfo)
end

function FsyncElement:StartAudioWithName(audioName, sendEndTrigger, param)
    if not audioName or audioName == "" then
        return false
    end
    -- 播放音频
    ---@type AudioClip
    local audioClip = CourseEnv.ServicesManager:GetAssetService():GetConfigGameObjectWithUAddress(self.VisElement.gameObject
        .transform.parent,
        audioName)
    if not audioClip then
        return false
    end

    local observerService = CourseEnv.ServicesManager:GetObserverService()

    self:StopAudio(false)
    self.audioCoroutine = self.commonService:StartCoroutine(function()
        self.commonService:YieldEndFrame()
        observerService:Fire("Dialog.Panel.PlayAudioClip" .. self.uniId, audioClip)
        local audioPitch = PlayerPrefs.GetFloat(DIALOGUE_AI_PITCH, 1)
        local audioTime = audioClip.length / audioPitch
        self.commonService:YieldSeconds(audioTime)--/ audioTime)
        self:StopAudio(sendEndTrigger) -- true 播放完音频了 这个sendEndTrigger 是个没有 用到的变量
        -- 重听按钮可以点击
        observerService:Fire("Dialog.Panel.ChangeReplayButtonState" .. self.uniId, "Normal")
        if param then
            self:DealGoonButtonAndReplsyGuideStateWhenAuidoPlayFinlish(param)
        end
    end)

    return true
end

---@public 停止播放音频
---@param sendEndTrigger boolean 是否发送trigger
function FsyncElement:StopAudio(sendEndTrigger)
    g_Log("forping.Dialog.StopAudio:")
    if self.audioCoroutine then
        local observerService = CourseEnv.ServicesManager:GetObserverService()
        if observerService then
            observerService:Fire("Dialog.Panel.StopAudioSource" .. self.uniId)
        end
        if sendEndTrigger and not self.hasTrggerAudioFinlish then
            g_Log("forping.选项对话.Controller:发起了 audioPlayFinilishAction 的Trigger")
            self.hasTriggerAudioFinlish = true
        end
        self.commonService:StopCoroutineSafely(self.audioCoroutine)
        self.audioCoroutine = nil

    end
end

-- 结束重听引导
function FsyncElement:StopReplayGuide()
    g_Log("forping.Dialog.StopReplayGuide:")
    -- 展示点击继续按钮
    local observerService = CourseEnv.ServicesManager:GetObserverService()
    observerService:Fire("Dialog.Panel.ReplayGuideDone" .. self.uniId)

    local param = {}

    param.goonType = tonumber(self.goonType)
    param.countDownTimer = tonumber(self.countDownTimer) or 5
    param.goonTitle = self.goonButtonText
    param.goonTitle = self:SubStrForMaxNum(param.goonTitle, self.maxGoonTextLen)
    if not param.goonTitle or param.goonTitle == "" then
        param.goonTitle = "点击继续"
    end
    self:DealGoonButtonAndReplsyGuideStateWhenAuidoPlayFinlish(param)
end

function FsyncElement:DealClickReplayButtonEvent(type)
    local observerService = CourseEnv.ServicesManager:GetObserverService()
    if type == 1 then
        self:StopReplayGuide()
    end
    if self.audioCoroutine then
        self:StopAudio(false) -- 没有播放完音频
        observerService:Fire("Dialog.Panel.ChangeReplayButtonState" .. self.uniId, "Normal")
    else
        self:StartAudioWithName(self.audio.uAddress)
        observerService:Fire("Dialog.Panel.ChangeReplayButtonState" .. self.uniId, "Selected")
    end

end

---@public 修改UI面板
function FsyncElement:ChangeOperationState(show)
    g_Log("forping:Dialog:ChangeOperationState:",tostring(show))
    local joystickService = CourseEnv.ServicesManager.GetJoystickService()
    local UIService = CourseEnv.ServicesManager:GetUIService()
    if show  then
        UIService:showCommonMenu()
        if self.hideJumpId then
            joystickService:setVisibleJumpWithID(self.hideJumpId)
        end
        if self.hideJoyId then
            joystickService:setVisibleJoyWithID(self.hideJoyId)
        end
        -- joystickService:hidenJoyAndJump(false)
    else
        UIService:hidenCommonMenu()
        self.hideJumpId = joystickService:setHidenJumpWithID()
        self.hideJoyId = joystickService:setHidenJoyWithID()
        -- joystickService:hidenJoyAndJump(true)
    end
end

------------------------IRC消息---------------------------------------------
-- 收到/恢复IRC消息
-- @param key  订阅的消息key
-- @param value  消息集合体
-- @param isResume  是否为恢复消息
function FsyncElement:ReceiveMessage(key, value, isResume)

end

------------------------蓝图组件相应方法---------------------------------------------
--收到Trigger事件
function FsyncElement:OnReceiveTriggerEvent(interfaceId)

end

--是否是异步恢复如果是需要改成true
function FsyncElement:LogicMapIsAsyncRecorver()
    return false
end

--开始恢复方法（断线重连的时候用）
function FsyncElement:LogicMapStartRecover()
    FsyncElement.super:LogicMapStartRecover()
    --TODO
end

--结束恢复方法 (断线重连的时候用)
function FsyncElement:LogicMapEndRecover()
    FsyncElement.super:LogicMapEndRecover(self)
    --TODO
end

--所有的组件恢复完成
function FsyncElement:LogicMapAllComponentRecoverComplete()
end

--收到GetData事件
function FsyncElement:OnReceiveGetDataEvent(interfaceId)
    return nil
end

------------------------蓝图组件相应方法End---------------------------------------------

--- 字符串处理
-- 截取字串，传入最大个数
function FsyncElement:SubStrForMaxNum(str, max)
    local curStr = tostring(str)
    local len = self:GetStringLength(curStr)

    if len <= max then
        return curStr
    end

    local result = self:StringSub(curStr, 1, max)

    return result
end

-- 获取字串长度
function FsyncElement:GetStringLength(inputstr)
    if not inputstr or type(inputstr) ~= "string" or #inputstr <= 0 then --inputstr不为nil、类型为字符串、且长度不为0
        return 0
    end
    local length = 0 -- 字符的个数
    local i = 1
    while true do
        local curByte = string.byte(inputstr, i) --获取单个字节的ASCII码
        local byteCount = 1 --单个字符的字节数，根据ASCII判断字节数
        if curByte > 239 then
            byteCount = 4 -- 4字节字符
        elseif curByte > 223 then
            byteCount = 3 -- 汉字，3字节
        elseif curByte > 128 then
            byteCount = 2 -- 双字节字符
        else
            byteCount = 1 -- 单字节字符
        end

        i = i + byteCount
        length = length + 1
        if i > #inputstr then
            break
        end
    end
    return length --返回字符个数
end

-- 截取字串
function FsyncElement:StringSub(str, startIndex, endIndex)
    local tempStr = str
    local byteStart = 1 -- string.sub截取的开始位置
    local byteEnd = -1 -- string.sub截取的结束位置
    local index = 0 -- 字符记数
    local bytes = 0 -- 字符的字节记数

    startIndex = math.max(startIndex, 1)
    endIndex = endIndex or -1
    while string.len(tempStr) > 0 do
        if index == startIndex - 1 then
            byteStart = bytes + 1;
        elseif index == endIndex then
            byteEnd = bytes;
            break;
        end
        bytes = bytes + self:getBytes(tempStr)
        tempStr = string.sub(str, bytes + 1)

        index = index + 1
    end
    return string.sub(str, byteStart, byteEnd)
end

--  得到字符
function FsyncElement:getBytes(char)
    if not char then
        return 0
    end
    local code = string.byte(char)
    if code < 127 then
        return 1
    elseif code <= 223 then
        return 2
    elseif code <= 239 then
        return 3
    elseif code <= 247 then
        return 4
    else
        -- 讲道理不会走到这里^_^
        return 0
    end
end

--- 返回不要前缀有空格的橘子
function FsyncElement:getNewSentence(str)
    for i = 1, #str, 1 do
        local s = string.sub(str, i, i)
        if s ~= " " and s ~= " " then
            return string.sub(str, i)
        end
    end
    return str
end

return FsyncElement
